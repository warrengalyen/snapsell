// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [id], references: [user_id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [user_id], onDelete: Cascade)
}

model User {
  user_id         String    @id @default(cuid())
  user_first_name String
  user_last_name  String
  user_email      String    @unique
  password_hash   String
  store           Store[]
  created_at      DateTime  @default(now())
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Store {
  store_id       String      @id @default(cuid())
  user           User?       @relation(fields: [store_owner_id], references: [user_id])
  store_owner_id String
  store_owner    String
  store_name     String
  store_url      String      @unique
  orders         Order[]
  products       Product[]
  customers      Customer[]
  storefront     Storefront?
  created_at     DateTime    @default(now())
}

model Order {
  order_id              String    @id @unique @default(cuid())
  order                 Store     @relation(fields: [store_id], references: [store_id])
  store_id              String
  customer_id           String
  friendly_order_number Int       @default(autoincrement())
  bill_address          Address   @relation(fields: [bill_address_id], references: [address_id], name: "bill_address_id")
  ship_address          Address   @relation(fields: [ship_address_id], references: [address_id], name: "ship_address_id")
  bill_address_id       String    @unique
  ship_address_id       String    @unique
  products              Product[]
  order_details         Json[]
  created_at            DateTime  @default(now())
  total_order_cost      Int
  customer              Customer  @relation(fields: [customer_id], references: [customer_id])
}

model Product {
  product_id        String   @id @default(cuid())
  store             Store    @relation(fields: [store_id], references: [store_id])
  store_id          String
  SKU               String
  product_name      String
  barcode           Int?
  inventory_qty     Int      @default(0)
  description       String   @default("")
  tags              String?
  product_images    Json?
  orders            Order[]
  product_price     Int
  categories        String?
  department        String?
  is_active         Boolean  @default(true)
  product_name_slug String
  created_at        DateTime @default(now())
}

model Customer {
  customer_id         String            @id @unique @default(cuid())
  customer_first_name String
  customer_last_name  String
  customer_email      String
  phone_number        Int?
  customer_account    Customer_account?
  addresses           Address[]
  store               Store             @relation(fields: [store_id], references: [store_id])
  store_id            String
  orders              Order[]
  created_at          DateTime          @default(now())
}

model Customer_account {
  customer_account_id            String   @id @unique @default(cuid())
  customer_account_password_hash String
  customer_id                    String   @unique
  customer                       Customer @relation(fields: [customer_id], references: [customer_id])
}

model Address {
  address_id         String    @id @unique @default(cuid())
  address_first_name String
  address_last_name  String
  address_line_1     String
  address_line_2     String?
  state              String?
  city               String
  country            String
  postcode           String
  customer           Customer? @relation(fields: [customer_id], references: [customer_id])
  customer_id        String?
  order_bill_address Order?    @relation("bill_address_id")
  order_ship_address Order?    @relation("ship_address_id")
}

model Storefront {
  storefront_id     String  @id @unique @default(cuid())
  global_styles     String?
  blocks            String?
  store_id          String  @unique
  support_email     String?
  store_logo        Json?
  store_hero_image  Json?
  store_description String?
  store             Store   @relation(fields: [store_id], references: [store_id])
}
